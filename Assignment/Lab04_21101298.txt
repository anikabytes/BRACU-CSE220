CSE220 LAB-4 
-------------------------------------------------------------------------------------------
NAME : ANIKA ISLAM 
ID : 21101298
SECTION : 04 
-------------------------------------------------------------------------------------------

class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p

class DoublyList:

    def __init__(self,a) :
        if type(a) == list :
            self.head = Node(None,None,None)
            tail = self.head 
            for i in range(0,len(a)) :
                temp = Node(a[i],None,None)
                tail.next = temp 
                temp.prev = tail 
                tail = temp 
            tail.next = self.head 
            self.head.prev = tail 
        else :
            self.head =  a
       
    def countNode(self) :

        count = 0 
        n = self.head.next

        while n.element != None :
            count += 1 
            n = n.next 
        return count 
    
    def forwardprint(self) :

        n = self.head.next
        store = ''

        while n.element != None :
            if n.next.element != None :
                store += str(n.element) + ', '
            else :
                store += str(n.element)
            n = n.next 
        print(store)
    
    def backwardprint(self) :
        
        n = self.head.prev 
        store = ''

        while n.element != None :
            if n.prev.element != None :
                store += str(n.element) + ', '
            else :
                store += str(n.element)
            n = n.prev 
        print(store)

    
    def nodeAt(self,idx) :

        n = self.head.next 
        count = 0 
        ans = None 

        if idx < 0 or idx > self.countNode() :
            ans = Node('index error',None,None)
        else :
            while n.element != None :
                if count == idx :
                    ans = n 
                    break
                count += 1 
                n = n.next 
        return ans       

    def indexOf(self,elem) :

        n = self.head.next 
        count = 0

        while n.element != None :
            if n.element == elem :
                return count 
            count += 1 
            n = n.next 
        return -1
    
    def insert(self, elem, idx): 

        newNode = Node(elem,None,None)
        head = self.head.next 
        count = self.countNode()

        if idx < 0 or idx > count :
            print('Invalid Index')
        else :
            i = 0 
            while i < idx :
                head = head.next 
                i += 1 
            p = head.prev 
            newNode.next = head
            head.prev = newNode 
            p.next = newNode
            newNode.prev = p 
        
    def remove(self,idx) :

        head = self.head.next 
        count = self.countNode()

        if idx < 0 or idx > count-1 :
            print('Invalid Index')
        else : 
            i = 0 
            while i < idx :
                head = head.next  
                i += 1 

            temp = head 
            p = head.prev 
            n = head.next 
            p.next = n
            n.prev = p 
            head.next = None 
            head.prev = None 
            head = None 

        return str(temp.element)



print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.



OUTPUT :

///  Test 01  ///
10, 20, 30, 40
40, 30, 20, 10
4
///  Test 02  ///
30
///  Test 03  ///
3
///  Test 04  ///
10, 20, 30, 40
85, 10, 20, 30, 40
40, 30, 20, 10, 85

85, 10, 20, 95, 30, 40
40, 30, 95, 20, 10, 85

85, 10, 20, 95, 30, 40, 75
75, 40, 30, 95, 20, 10, 85
///  Test 05  ///
10, 20, 30, 40, 50, 60, 70
Removed element: 10
20, 30, 40, 50, 60, 70
70, 60, 50, 40, 30, 20
Removed element: 50
20, 30, 40, 60, 70
70, 60, 40, 30, 20
Removed element: 70
20, 30, 40, 60
60, 40, 30, 20

